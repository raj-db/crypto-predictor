{
    //
    // Inspiration:
    //
    // https://github.com/matheusfvesco/devcontainer-templates/blob/main/src/python-dind/.devcontainer/devcontainer.json
    // https://github.com/devcontainers-extra/features
    //
    //
    // For quick reference: https://containers.dev/implementors/json_reference/
    //
    "name": "py-3.12-bookworm",
    "image": "python:3.12-bookworm",

    //"build": {
    //  "context": "..",
    //  "dockerfile": "Dockerfile"
    //},

    // 1. Use 'forwardPorts' to make a list of ports inside the container available locally.
    // "forwardPorts": []

    // 2. Use 'mounts' to make a list of local directories available inside the container. More info: https://code.visualstudio.com/remote/advancedcontainers/add-local-file-mount
    "mounts": [
        // For SSH key mounting (works across platforms):
        // - Linux: $HOME/.ssh
        // - macOS: $HOME/.ssh
        // - Windows: %USERPROFILE%\.ssh
        "type=bind,source=${localEnv:HOME}${localEnv:USERPROFILE}/.ssh,target=/root/.ssh,readonly"
    ],

    // 3. Use 'runArgs' to pass arguments to the container.
    // run the container with all GPUs
    //"runArgs": [
    //  "--gpus",
    //  "all"
    //],

    // 4. Features to add to the Dev Container. More info: https://containers.dev/implementors/features.
    "features": {
        // Python with uv, Ruff, Mypy, MonkeyType and Bandit, installed using pipx 
        "ghcr.io/devcontainers/features/python:1": {
            "installTools": "true",
            "toolsToInstall": "uv,ruff,mypy,MonkeyType,bandit"
        },
        
        // // git
        // "ghcr.io/devcontainers/features/git:1": {
        //     "version": "os-provided",
        //     "ppa": "false"
        // },

        // dind
        "ghcr.io/devcontainers/features/docker-in-docker": {},

        // direnv ENV helper
        "ghcr.io/devcontainers-extra/features/direnv:1": {},

        // tmux
        "ghcr.io/devcontainers-extra/features/tmux-apt-get:1": {},

        // pre-commit
        "ghcr.io/devcontainers-extra/features/pre-commit:2": {},

        // mise
        "ghcr.io/devcontainers-extra/features/mise:1": {},

        // kind
        "ghcr.io/devcontainers-extra/features/kind:1": {},

        // psql command line client
        "ghcr.io/rails/devcontainer/features/postgres-client:1.1.2": {}
    },

    // 5. Configure tool-specific properties.
    "customizations": {
        // Configure properties specific to VS Code.
        "vscode": {
            // Set *default* container specific settings.json values on container create.
            "settings": {
                "python.defaultInterpreterPath": "/workspaces/real-time-ml-system-cohort-4/.venv/bin/python"
            },
            // installs useful extensions.
            "extensions": [
                "ms-python.python",
                "ms-python.debugpy",
                "ms-python.vscode-pylance",
                "ms-python.isort",
                "ms-toolsai.jupyter",
                "ms-vscode.makefile-tools"
                // "ms-toolsai.jupyter-keymap",
                // "ms-toolsai.vscode-jupyter-cell-tags",
                // "ms-toolsai.jupyter-renderers",
                // "ms-toolsai.vscode-jupyter-slideshow",
                // "ms-toolsai.tensorboard",
                // "charliermarsh.ruff"
            ]
        }
    },

    // 6. Set `remoteUser` to `root` to connect as root instead. More info: https://aka.ms/vscode-remote/containers/non-root.
    "remoteUser": "root",

    // the following commands are related to container lifecylce. More info: https://containers.dev/implementors/json_reference/#lifecycle-scripts

    // 7. Use 'initializeCommand' to run commands ON THE HOST before container is created or started.
    // "initializeCommand": "",

    // 8. Use 'onCreateCommand' to run commands INSIDE THE CONTAINER after it started for the first time.
    // "onCreateCommand": "",

    // 9. Use 'updateContentCommand' to run commands if the root filetree have any changes, during container creation.
    // "updateContentCommand": "",

    // 10. Use 'postCreateCommand' to run commands after the container is created.
    // "postCreateCommand": "pip3 install --user -r requirements.txt",
    "postCreateCommand": "bash .devcontainer/postCreateCommand.sh",

    // 11. Use 'postStartCommand' to run a command each time the container starts successfully.
    "postStartCommand": "git config --global --add safe.directory ${containerWorkspaceFolder}"

    // 12. Use 'postAttachCommand' to run a command each time a tool attaches to the container successfully.
    // "postAttachCommand": "",
}